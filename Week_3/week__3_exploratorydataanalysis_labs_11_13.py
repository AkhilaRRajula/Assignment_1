# -*- coding: utf-8 -*-
"""Week _3_ExploratoryDataAnalysis-labs_11-13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VBen9j_pdFabmMtkTE8KJedBfvJ9UXnD

# **Exploratory Data Analysis Lab**

Estimated time needed: **30** minutes

In this module you get to work with the cleaned dataset from the previous module.

In this assignment you will perform the task of exploratory data analysis.
You will find out the distribution of data, presence of outliers and also determine the correlation between different columns in the dataset.

## Objectives

In this lab you will perform the following:

-   Identify the distribution of data in the dataset.

-   Identify outliers in the dataset.

-   Remove outliers from the dataset.

-   Identify correlation between features in the dataset.

* * *

## Hands on Lab

Import the pandas module.
"""

import pandas as pd

"""Load the dataset into a dataframe.

"""

df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv")

"""## Distribution

### Determine how the data is distributed

The column `ConvertedComp` contains Salary converted to annual USD salaries using the exchange rate on 2019-02-01.

This assumes 12 working months and 50 working weeks.

Plot the distribution curve for the column `ConvertedComp`.
"""

import matplotlib.pyplot as plt

# Plot the distribution curve for the column 'ConvertedComp'
plt.figure(figsize=(10, 6))
plt.hist(df['ConvertedComp'].dropna(), bins=30, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Distribution of Converted Compensation')
plt.xlabel('Converted Compensation (USD)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""Plot the histogram for the column `ConvertedComp`.

"""

# Plot the histogram for the column 'ConvertedComp'
plt.figure(figsize=(10, 6))
plt.hist(df['ConvertedComp'].dropna(), bins=30, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Histogram of Converted Compensation')
plt.xlabel('Converted Compensation (USD)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""What is the median of the column `ConvertedComp`?

"""

# Calculate the median of the column 'ConvertedComp'
median_converted_comp = df['ConvertedComp'].median()

print("Median of the column 'ConvertedComp':", median_converted_comp)

"""How many responders identified themselves only as a **Man**?

"""

# Count the number of respondents who identified themselves only as a man
num_man_only = df[df['Gender'] == 'Man'].shape[0]

print("Number of responders who identified themselves only as a Man:", num_man_only)

"""Find out the  median ConvertedComp of responders identified themselves only as a **Woman**?

"""

# Filter the DataFrame for responders identified as Woman
woman_responses = df[df['Gender'] == 'Woman']

# Calculate the median ConvertedComp for responders identified as Woman
median_converted_comp_woman = woman_responses['ConvertedComp'].median()

print("Median ConvertedComp of responders identified themselves only as a Woman:", median_converted_comp_woman)

"""Give the five number summary for the column `Age`?

**Double click here for hint**.

<!--
min,q1,median,q3,max of a column are its five number summary.
-->
"""

# Calculate the five-number summary for the column 'Age'
five_num_summary_age = df['Age'].describe(percentiles=[.25, .5, .75])

print("Five-number summary for the column 'Age':")
print(five_num_summary_age[['min', '25%', '50%', '75%', 'max']])

"""Plot a histogram of the column `Age`.

"""

import matplotlib.pyplot as plt

# Plot a histogram of the column 'Age'
plt.figure(figsize=(10, 6))
plt.hist(df['Age'].dropna(), bins=30, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Histogram of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Calculate the median age of survey respondents
median_age = df['Age'].median()

print("Median age of survey respondents:", median_age)

# Filter the DataFrame to include only respondents who have identified themselves as 'Woman'
woman_df = df[df['Gender'] == 'Woman']

# Calculate the median ConvertedComp for 'Woman' respondents
median_converted_comp_woman = woman_df['ConvertedComp'].median()

print("Median ConvertedComp of respondents who identified themselves as 'Woman':", median_converted_comp_woman)

import matplotlib.pyplot as plt

# Plot a histogram of the 'Age' column
plt.figure(figsize=(10, 6))
plt.hist(df['Age'], bins=30, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Histogram of Age')
plt.xlabel('Age')
plt.ylabel('Number of Respondents')
plt.grid(True)
plt.show()

"""## Outliers

### Finding outliers

Find out if outliers exist in the column `ConvertedComp` using a box plot?
"""

# Create a box plot for the column 'ConvertedComp'
plt.figure(figsize=(10, 6))
plt.boxplot(df['ConvertedComp'].dropna(), vert=False)
plt.title('Box Plot of Converted Compensation')
plt.xlabel('Converted Compensation (USD)')
plt.show()

"""Find out the Inter Quartile Range for the column `ConvertedComp`.

"""

# Calculate the first quartile (Q1) and third quartile (Q3) of the column 'ConvertedComp'
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the interquartile range (IQR)
IQR = Q3 - Q1

print("Interquartile Range (IQR) for the column 'ConvertedComp':", IQR)

"""Find out the upper and lower bounds.

"""

# Calculate the upper and lower bounds for outliers
upper_bound = Q3 + 1.5 * IQR
lower_bound = Q1 - 1.5 * IQR

print("Upper bound for outliers:", upper_bound)
print("Lower bound for outliers:", lower_bound)

"""Identify how many outliers are there in the `ConvertedComp` column.

"""

# Count the number of outliers in the column 'ConvertedComp'
num_outliers = df[(df['ConvertedComp'] < lower_bound) | (df['ConvertedComp'] > upper_bound)].shape[0]

print("Number of outliers in the 'ConvertedComp' column:", num_outliers)

"""Create a new dataframe by removing the outliers from the `ConvertedComp` column.

"""

# Filter the original DataFrame to remove outliers from the 'ConvertedComp' column
df_no_outliers = df[(df['ConvertedComp'] >= lower_bound) & (df['ConvertedComp'] <= upper_bound)]

# Display the first few rows of the new DataFrame
print(df_no_outliers.head())

# Calculate the median ConvertedComp before removing outliers
median_converted_comp_before = df['ConvertedComp'].median()

print("Median ConvertedComp before removing outliers:", median_converted_comp_before)

# Calculate the median ConvertedComp after removing outliers
median_converted_comp_after = df_no_outliers['ConvertedComp'].median()

print("Median ConvertedComp after removing outliers:", median_converted_comp_after)

import seaborn as sns

# Create a boxplot of the 'Age' column
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Age'])
plt.title('Boxplot of Age')
plt.xlabel('Age')
plt.show()

# Get the summary statistics of the 'Age' column
age_stats = df['Age'].describe()

# Count the number of outliers below Q1
num_outliers_below_Q1 = age_stats['count'] - age_stats['25%']

print("Number of outliers below Q1:", num_outliers_below_Q1)

# Calculate the mean ConvertedComp after removing outliers
mean_converted_comp_after = df_no_outliers['ConvertedComp'].mean()

print("Mean ConvertedComp after removing outliers:", mean_converted_comp_after)

"""## Correlation

### Finding correlation

Find the correlation between `Age` and all other numerical columns.
"""

# Calculate the correlation between 'Age' and all other numerical columns
correlation = df.corr()['Age']

# Print the correlation values
print(correlation)

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Extract the correlation coefficients between "Age" and all other columns
age_correlation = correlation_matrix['Age'].drop('Age')  # Exclude correlation with itself

# Find the column with the lowest correlation coefficient (indicating a negative correlation)
column_with_negative_correlation = age_correlation.idxmin()

print("Column with a negative correlation with 'Age':", column_with_negative_correlation)

# Find the column with the highest correlation coefficient
column_with_highest_correlation = age_correlation.idxmax()

print("Column with the highest correlation with 'Age':", column_with_highest_correlation)